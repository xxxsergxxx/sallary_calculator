import streamlit as st
import pandas as pd
from datetime import date, datetime
from calendar import monthrange


# üìå –°–≤—è—Ç–∫–æ–≤—ñ –¥–Ω—ñ –£–∫—Ä–∞—ó–Ω–∏ (2025)
ukr_holidays_2025 = [
    "2025-01-01", "2025-01-07", "2025-03-08",
    "2025-04-20", "2025-05-01", "2025-05-09",
    "2025-06-08", "2025-06-28", "2025-08-24",
    "2025-10-14", "2025-12-25"
]
ukr_holidays_2025 = [datetime.strptime(d, "%Y-%m-%d").date() for d in ukr_holidays_2025]

# üìå –ù–∞–∑–≤–∏ –º—ñ—Å—è—Ü—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
ukr_months = {
    1: "–°—ñ—á–µ–Ω—å", 2: "–õ—é—Ç–∏–π", 3: "–ë–µ—Ä–µ–∑–µ–Ω—å", 4: "–ö–≤—ñ—Ç–µ–Ω—å",
    5: "–¢—Ä–∞–≤–µ–Ω—å", 6: "–ß–µ—Ä–≤–µ–Ω—å", 7: "–õ–∏–ø–µ–Ω—å", 8: "–°–µ—Ä–ø–µ–Ω—å",
    9: "–í–µ—Ä–µ—Å–µ–Ω—å", 10: "–ñ–æ–≤—Ç–µ–Ω—å", 11: "–õ–∏—Å—Ç–æ–ø–∞–¥", 12: "–ì—Ä—É–¥–µ–Ω—å"
}

# üìå –î–Ω—ñ —Ç–∏–∂–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
ukr_weekdays = {
    0: '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', 1: '–í—ñ–≤—Ç–æ—Ä–æ–∫', 2: '–°–µ—Ä–µ–¥–∞',
    3: '–ß–µ—Ç–≤–µ—Ä', 4: '–ü‚Äô—è—Ç–Ω–∏—Ü—è', 5: '–°—É–±–æ—Ç–∞', 6: '–ù–µ–¥—ñ–ª—è'
}

# üìå –°–∞–π–¥–±–∞—Ä
st.sidebar.title("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
month = st.sidebar.selectbox("–ú—ñ—Å—è—Ü—å", options=list(ukr_months.keys()), format_func=lambda m: ukr_months[m])
year = st.sidebar.number_input("–†—ñ–∫", min_value=2020, max_value=2030, value=2025, step=1)

start_date = date(year, month, 1)
last_day = monthrange(year, month)[1]  # –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —É –º—ñ—Å—è—Ü—ñ
end_date = date(year, month, last_day)


rate = st.sidebar.number_input("–¢–∞—Ä–∏—Ñ (–≥—Ä–Ω/–≥–æ–¥)", value=10.0, step=0.5)


if start_date > end_date:
    st.error("‚ùå –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –∫—ñ–Ω—Ü–µ–≤–æ—ó")
    st.stop()

# üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞–±–µ–ª—é –∑ —Ñ–∞–π–ª—É
uploaded_file = st.file_uploader("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞–±–µ–ª—å –∑ —Ñ–∞–π–ª—É", type=["csv"])
if uploaded_file:
    df = pd.read_csv(uploaded_file, parse_dates=["–î–∞—Ç–∞"])
    required_cols = {"–î–∞—Ç–∞", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω"}
    if not required_cols.issubset(df.columns):
        st.error("‚ùå –§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ '–î–∞—Ç–∞' —Ç–∞ '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω'")
    else:
        df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"])
        df["–î–µ–Ω—å —Ç–∏–∂–Ω—è"] = df["–î–∞—Ç–∞"].dt.dayofweek.map(ukr_weekdays)
        df["–°–≤—è—Ç–æ"] = df["–î–∞—Ç–∞"].dt.date.isin(ukr_holidays_2025).map({True: "–¢–∞–∫", False: "–ù—ñ"})
        st.session_state.edited_df = df.copy()

# üìÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞–±–µ–ª—é –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
if (
    "edited_df" not in st.session_state or
    st.session_state.get("prev_start_date") != start_date or
    st.session_state.get("prev_end_date") != end_date
):
    all_days = pd.date_range(start=start_date, end=end_date, freq='D')
    df = pd.DataFrame({"–î–∞—Ç–∞": all_days})
    df["–î–µ–Ω—å —Ç–∏–∂–Ω—è"] = df["–î–∞—Ç–∞"].dt.dayofweek.map(ukr_weekdays)
    df["–°–≤—è—Ç–æ"] = df["–î–∞—Ç–∞"].dt.date.isin(ukr_holidays_2025).map({True: "–¢–∞–∫", False: "–ù—ñ"})
    df["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω"] = ""
    st.session_state.edited_df = df.copy()
    st.session_state.prev_start_date = start_date
    st.session_state.prev_end_date = end_date

# üïó –ê–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
st.title("üìã –¢–∞–±–µ–ª—å —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω")
auto_fill = st.checkbox("üïó –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ 8 –≥–æ–¥–∏–Ω –¥–ª—è —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤")

df_to_edit = st.session_state.edited_df.copy()

if auto_fill:
    def auto_fill_hours(row):
        if (row["–î–µ–Ω—å —Ç–∏–∂–Ω—è"] not in ["–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]) and row["–°–≤—è—Ç–æ"] == "–ù—ñ":
            return 8.0 if row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω"] in [None, "", 0, 0.0] else row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω"]
        return row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω"]

    df_to_edit["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω"] = df_to_edit.apply(auto_fill_hours, axis=1)

# ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
edited_df = st.data_editor(
    df_to_edit,
    num_rows="dynamic",
    use_container_width=True,
    column_config={
        "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω": st.column_config.NumberColumn(
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω",
            help="–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏—Ö –≥–æ–¥–∏–Ω –∑–∞ –¥–µ–Ω—å",
            min_value=0,
            max_value=24,
            step=0.5,
            format="%.1f"
        )
    },
    disabled=["–î–∞—Ç–∞", "–î–µ–Ω—å —Ç–∏–∂–Ω—è", "–°–≤—è—Ç–æ"]
)

# üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
st.session_state.edited_df = edited_df

# üí∏ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞—Ä–ø–ª–∞—Ç–∏
def calculate_salary_details(row, rate):
    hours = row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω"]
    day = row["–î–µ–Ω—å —Ç–∏–∂–Ω—è"]
    is_holiday = row["–°–≤—è—Ç–æ"] == "–¢–∞–∫"

    if pd.isna(hours) or hours == "":
        return pd.Series([0.0, 0.0, 0.0, 0.0])

    hours = float(hours)

    if day == "–ù–µ–¥—ñ–ª—è" or is_holiday:
        gross = hours * rate * 2.0
    elif day == "–°—É–±–æ—Ç–∞":
        if hours <= 2:
            gross = hours * rate * 1.5
        else:
            gross = 2 * rate * 1.5 + (hours - 2) * rate * 2.0
    else:
        if hours <= 8:
            gross = hours * rate
        elif hours <= 10:
            gross = 8 * rate + (hours - 8) * rate * 1.5
        else:
            gross = 8 * rate + 2 * rate * 1.5 + (hours - 10) * rate * 2.0

    pdfo = gross * 0.18
    military = gross * 0.050
    clean = gross - pdfo - military

    return pd.Series([gross, clean, pdfo, military])

if st.button("üî¢ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É"):
    edited_df[["–ë—Ä—É–¥–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞", "–ß–∏—Å—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞", "–ü–î–§–û", "–í—ñ–π—Å—å–∫–æ–≤–∏–π –∑–±—ñ—Ä"]] = edited_df.apply(
        lambda row: calculate_salary_details(row, rate=rate), axis=1
    )

# üìä –ü—ñ–¥—Å—É–º–∫–∏
# üìä –ü—ñ–¥—Å—É–º–∫–∏ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ‚Äî —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–∂–µ —î —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
if "–ë—Ä—É–¥–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞" in edited_df.columns:
    st.markdown("### üìä –ü—ñ–¥—Å—É–º–∫–∏")
    col1, col2 = st.columns(2)
    col1.metric("üí∞ –ë—Ä—É–¥–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{edited_df['–ë—Ä—É–¥–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞'].sum():.2f} –≥—Ä–Ω")
    col2.metric("üßæ –ß–∏—Å—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{edited_df['–ß–∏—Å—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞'].sum():.2f} –≥—Ä–Ω")

    # üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª
    month_name = ukr_months[start_date.month]
    year = start_date.year
    file_name = f"–¢–∞–±–µ–ª—å_{month_name}_{year}.csv"

    st.download_button(
        label="üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞–±–µ–ª—å",
        data=edited_df.to_csv(index=False).encode('utf-8-sig'),
        file_name=file_name,
        mime="text/csv"
    )
else:
    st.info("üîî –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É **–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É**, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –ø—ñ–¥—Å—É–º–∫–∏ —ñ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª.")

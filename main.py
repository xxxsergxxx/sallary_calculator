import streamlit as st
import pandas as pd
from datetime import date, datetime

# üìå national days of Ukraine (2025)
ukr_holidays_2025 = [
    "2025-01-01", "2025-01-07", "2025-03-08",
    "2025-04-20", "2025-05-01", "2025-05-09",
    "2025-06-08", "2025-06-28", "2025-08-24",
    "2025-10-14", "2025-12-25"
]
ukr_holidays_2025 = [datetime.strptime(d, "%Y-%m-%d").date() for d in ukr_holidays_2025]

# üìå Ukrainian days of week
ukr_weekdays = {
    0: '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', 1: '–í—ñ–≤—Ç–æ—Ä–æ–∫', 2: '–°–µ—Ä–µ–¥–∞',
    3: '–ß–µ—Ç–≤–µ—Ä', 4: '–ü‚Äô—è—Ç–Ω–∏—Ü—è', 5: '–°—É–±–æ—Ç–∞', 6: '–ù–µ–¥—ñ–ª—è'
}

# üìå Sidebar: sallary
st.sidebar.title("‚öôÔ∏è Settings")
rate = st.sidebar.number_input("–¢–∞—Ä–∏—Ñ (–≥—Ä–Ω/–≥–æ–¥)", value=10.0, step=0.5)
start_date = st.sidebar.date_input("–ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞", value=date(2025, 1, 1))
end_date = st.sidebar.date_input("–ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞", value=date(2025, 1, 31))

# üìå Check diapasone 
if start_date > end_date:
    st.error("‚ùå –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –∫—ñ–Ω—Ü–µ–≤–æ—ó")
    st.stop()

# üìå Table generation
all_days = pd.date_range(start=start_date, end=end_date, freq='D')
df = pd.DataFrame({"–î–∞—Ç–∞": all_days})
df["–î–µ–Ω—å —Ç–∏–∂–Ω—è"] = df["–î–∞—Ç–∞"].dt.dayofweek.map(ukr_weekdays)
df["–°–≤—è—Ç–æ"] = df["–î–∞—Ç–∞"].dt.date.isin(ukr_holidays_2025).map({True: "–¢–∞–∫", False: "–ù—ñ"})
df["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω"] = ""

# üìå Editted table
st.title("üìã –¢–∞–±–µ–ª—å —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω")

# üïó Botton auto filling 8 hours
if st.button("üïó –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ 8 –≥–æ–¥–∏–Ω –¥–ª—è —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤"):
    def auto_fill_hours(row):
        if (row["–î–µ–Ω—å —Ç–∏–∂–Ω—è"] not in ["–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]) and row["–°–≤—è—Ç–æ"] == "–ù—ñ":
            return 8.0
        return row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω"]
    
    df["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω"] = df.apply(auto_fill_hours, axis=1)


# Making editable after filling
edited_df = st.data_editor(
    df,  # df –≤–∂–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –≥–æ–¥–∏–Ω–∏
    num_rows="dynamic",
    use_container_width=True,
    column_config={
        "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω": st.column_config.NumberColumn(
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω",
            help="–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏—Ö –≥–æ–¥–∏–Ω –∑–∞ –¥–µ–Ω—å",
            min_value=0,
            max_value=24,
            step=0.5,
            format="%.1f"
        )
    },
    disabled=["–î–∞—Ç–∞", "–î–µ–Ω—å —Ç–∏–∂–Ω—è", "–°–≤—è—Ç–æ"]
)

# üìå Function calculation sallary
def calculate_salary_details(row, rate):
    hours = row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω"]
    day = row["–î–µ–Ω—å —Ç–∏–∂–Ω—è"]
    is_holiday = row["–°–≤—è—Ç–æ"] == "–¢–∞–∫"

    if pd.isna(hours) or hours == "":
        return pd.Series([0.0, 0.0, 0.0, 0.0])

    hours = float(hours)

    # brutto
    if day == "–ù–µ–¥—ñ–ª—è" or is_holiday:
        gross = hours * rate * 2.0
    elif day == "–°—É–±–æ—Ç–∞":
        if hours <= 2:
            gross = hours * rate * 1.5
        else:
            gross = 2 * rate * 1.5 + (hours - 2) * rate * 2.0
    else:
        if hours <= 8:
            gross = hours * rate
        elif hours <= 10:
            gross = 8 * rate + (hours - 8) * rate * 1.5
        else:
            gross = 8 * rate + 2 * rate * 1.5 + (hours - 10) * rate * 2.0

    # –í—ñ–¥—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
    pdfo = gross * 0.18
    military = gross * 0.015
    clean = gross - pdfo - military

    return pd.Series([gross, clean, pdfo, military])

# üìå Calculating sallary
edited_df[["–ë—Ä—É–¥–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞", "–ß–∏—Å—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞", "–ü–î–§–û", "–í—ñ–π—Å—å–∫–æ–≤–∏–π –∑–±—ñ—Ä"]] = edited_df.apply(
    lambda row: calculate_salary_details(row, rate=rate), axis=1
)

# # üìå output table
# st.markdown("### üí∏ –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞")
# st.dataframe(edited_df)

# üìå Summary
st.markdown("### üìä –ü—ñ–¥—Å—É–º–∫–∏")
col1, col2 = st.columns(2)
col1.metric("üí∞ –ë—Ä—É–¥–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{edited_df['–ë—Ä—É–¥–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞'].sum():.2f} –≥—Ä–Ω")
col2.metric("üßæ –ß–∏—Å—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{edited_df['–ß–∏—Å—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞'].sum():.2f} –≥—Ä–Ω")
